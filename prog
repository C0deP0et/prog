!!!! Addr !!!!
#!/bin/bash

# File to store address book data
address_book="address_book.txt"

# Function to create a new record
create_record() {
    echo "Enter Name: "
    read name
    echo "Enter Phone Number: "
    read phone
    echo "$name, $phone" >> "$address_book"
    echo "Record saved."
}

# Function to view all records
view_records() {
    if [ -f "$address_book" ]; then
        echo "Address Book Records:"
        cat "$address_book"
    else
        echo "No records found."
    fi
}

# Function to delete a record
delete_record() {
    echo "Enter the name of the record to delete: "
    read name
    sed -i "/^$name,/d" "$address_book"
    echo "Record deleted (if it existed)."
}

# Main menu
while true; do
    echo "Address Book Menu:"
    echo "1. Create a new record"
    echo "2. View all records"
    echo "3. Delete a record"
    echo "4. Exit"
    echo "Enter your choice: "
    read choice

    case $choice in
        1) create_record ;;
        2) view_records ;;
        3) delete_record ;;
        4) echo "Exiting..."; break ;;
        *) echo "Invalid choice, please try again." ;;
    esac
done


!!!! Linux !!!!
1. echo
Purpose: Used to display text or variables to the terminal.

echo "Hello, World!"        # Outputs: Hello, World!
name="Alice"
echo "Hello, $name"          # Outputs: Hello, Alice

2. ls
Purpose: Lists files and directories.
Options:
-l : Lists with detailed information.
-a : Shows hidden files.

ls                          # Lists files in the current directory
ls -l                       # Lists files with detailed information
ls -a                       # Lists all files, including hidden ones
3. read
Purpose: Used to take input from the user.

echo "Enter your name:"
read name
echo "Hello, $name!"

4. cat
Purpose: Concatenates and displays file content.
Options:
> filename : Overwrites the file with content.
>> filename : Appends content to the file.

cat file.txt                # Displays content of file.txt
cat file1.txt file2.txt > merged.txt   # Merges files

5. touch
Purpose: Creates empty files or updates file timestamps.

touch newfile.txt           # Creates an empty file

6. test
Purpose: Tests conditions like file existence or comparisons.

test -f file.txt            # Checks if file.txt exists
test -d mydir               # Checks if mydir is a directory
if test -f file.txt; then echo "File exists"; fi

7. Loops
For Loop:

for i in 1 2 3; do
  echo "Number $i"
done

While Loop:

count=1
while [ $count -le 5 ]; do
  echo "Count $count"
  count=$((count + 1))
done

8. Arithmetic Comparison

a=5
b=10
if [ $a -lt $b ]; then
  echo "$a is less than $b"
fi

10. grep
Purpose: Searches for text in files.
Options:
-i : Case insensitive.
-r : Recursive search in directories.

grep "pattern" file.txt     # Finds lines containing "pattern"

11. sed
Purpose: Stream editor for text replacement or manipulation.

sed 's/oldtext/newtext/' file.txt   # Replaces oldtext with newtext


!!!! FORK WAIT !!!!
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

void sort(int arr[], int n) {
    for (int i = 0; i < n-1; i++){
        for (int j = 0; j < n-i-1; j++){
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}}}

int main() {
    int arr[5] ;
    printf("Enter 5 integers");
    for(int i=0; i<5; i++){
    scanf("%d", &arr[i]);}
    int n = sizeof(arr) / sizeof(arr[0]);
    pid_t pid = fork();

    if (pid == 0) {
        printf("Child process: Zombie state demo\n");
        _exit(0); // Exit to create a zombie process
    } else {
        wait(NULL);
        printf("Parent process: Sorted Array: ");
        sort(arr, n);
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");
    }
}


!!!! Parent child reverse !!!!
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

void sort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }        }    }	}

int main() {
    int arr[] = {5, 3, 2, 4, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    pid_t pid = fork();

    if (pid == 0) {
        // Child process
        char *args[] = {"./reverse", NULL};
        execve(args[0], args, NULL);
    } else {
        // Parent process sorts the array
        sort(arr, n);
        printf("Sorted Array: ");
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");

        wait(NULL);  // Wait for child to finish
    }
    return 0;}

#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Reversed Array: ");
    for (int i = n - 1; i >= 0; i--)
        printf("%d ", arr[i]);
    printf("\n");
    return 0;}


!!!! SJF Preemptive !!!!
#include <stdio.h>
#include <limits.h>

struct Process {
    int pid; // Process ID
    int bt; // Burst Time
    int art; // Arrival Time
};

// Function to find the waiting time for all processes
void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int rt[n];

    // Copy the burst time into rt[]
    for (int i = 0; i < n; i++)
        rt[i] = proc[i].bt;

    int complete = 0, t = 0, minm = INT_MAX;
    int shortest = 0, finish_time;
    int check = 0; // changed boolean to integer

    //Process until all processes gets completed
    while (complete != n) {

        // Find process with minimum remaining time among the processes that arrives till the current time
        for (int j = 0; j < n; j++) {
            if ((proc[j].art <= t) &&
            (rt[j] < minm) && rt[j] > 0) {
                minm = rt[j];
                shortest = j;
                check = 1; // changed boolean to integer
            }        }

        if (check == 0) {
            t++;
            continue;        }

        // Reduce remaining time by one
        rt[shortest]--;

        minm = rt[shortest];
        if (minm == 0)
            minm = INT_MAX;

        // If a process gets completely executed
        if (rt[shortest] == 0) {

            complete++;
            check = 0; // changed boolean to integer

            // Find finish time of current process
            finish_time = t + 1;

            // Calculate waiting time
            wt[shortest] = finish_time -
                        proc[shortest].bt -
                        proc[shortest].art;

            if (wt[shortest] < 0)
                wt[shortest] = 0;
        }
        t++; // Increment time
    } }

void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
    // calculating turnaround time by adding bt[i] + wt[i]
    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findavgTime(struct Process proc[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    findWaitingTime(proc, n, wt);

    // Function to find turn around time for all processes
    findTurnAroundTime(proc, n, wt, tat);

    printf(" P\t\t"
        "BT\t\t"
        "WT\t\t"
        "TAT\t\t\n");

    for (int i = 0; i < n; i++) {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf(" %d\t\t"
            "%d\t\t %d"
            "\t\t %d\n", proc[i].pid,
            proc[i].bt, wt[i], tat[i]);
    }

    printf("\nAverage waiting time = "
        "%f", (float)total_wt / (float)n);
    printf("\nAverage turn around time = "
        "%f", (float)total_tat / (float)n);
}

int main() {
    struct Process proc[] = { { 1, 6, 2 }, { 2, 2, 5 },
                    { 3, 8, 1 }, { 4, 3, 0}, {5, 4, 4} };
    int n = sizeof(proc) / sizeof(proc[0]);

    findavgTime(proc, n);
    return 0;}


!!!! RR !!!!
#include<stdio.h>

void main()
{
    // initlialize the variable name
    int i, NOP, sum=0,count=0, y, quant, wt=0, tat=0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;
    printf(" Total number of process in the system: ");
    scanf("%d", &NOP);
    y = NOP; // Assign the number of process to variable y

// Use for loop to enter the details of the process like Arrival time and the Burst Time
for(i=0; i<NOP; i++)
{
printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i+1);
printf(" Arrival time is: \t");  // Accept arrival time
scanf("%d", &at[i]);
printf(" \nBurst time is: \t"); // Accept the Burst time
scanf("%d", &bt[i]);
temp[i] = bt[i]; // store the burst time in temp array
}
// Accept the Time qunat
printf("Enter the Time Quantum for the process: \t");
scanf("%d", &quant);
// Display the process No, burst time, Turn Around Time and the waiting time
printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");
for(sum=0, i = 0; y!=0; )
{
if(temp[i] <= quant && temp[i] > 0) // define the conditions
{
    sum = sum + temp[i];
    temp[i] = 0;
    count=1;
    }
    else if(temp[i] > 0)
    {
        temp[i] = temp[i] - quant;
        sum = sum + quant;
    }
    if(temp[i]==0 && count==1)
    {
        y--; //decrement the process no.
        printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);
        wt = wt+sum-at[i]-bt[i];
        tat = tat+sum-at[i];
        count =0;
    }
    if(i==NOP-1)
    {
        i=0;
    }
    else if(at[i+1]<=sum)
    {
        i++;
    }
    else
    {
        i=0;
    }
}
// represents the average waiting time and Turn Around time
avg_wt = wt * 1.0/NOP;
avg_tat = tat * 1.0/NOP;
printf("\n Average Turn Around Time: \t%f", avg_wt);
printf("\n Average Waiting Time: \t%f", avg_tat);
}


!!!! Semaphore both problems combined without using standard library !!!!
#include <stdio.h>
#include <stdlib.h>

// Initialize a mutex to 1
int mutex = 1;

// Number of full slots as 0
int full = 0;

// Number of empty slots as size of buffer
int empty = 10, x = 0;

// Function to produce an item and add it to the buffer
void producer()
{
    // Decrease mutex value by 1
    --mutex;

    // Increase the number of full slots by 1
    ++full;

    // Decrease the number of empty slots by 1
    --empty;

    // Item produced
    x++;
    printf("\nProducer produces"
           "item %d",
           x);

    // Increase mutex value by 1
    ++mutex;
}

// Function to consume an item and remove it from buffer
void consumer()
{
    // Decrease mutex value by 1
    --mutex;

    // Decrease the number of full slots by 1
    --full;

    // Increase the number of empty slots by 1
    ++empty;
    printf("\nConsumer consumes "
           "item %d",
           x);
    x--;
    // Increase mutex value by 1
    ++mutex;
}

int main()
{
    int n, i;
    printf("\n1. Press 1 for Producer"
           "\n2. Press 2 for Consumer"
           "\n3. Press 3 for Exit");

// Using '#pragma omp parallel for' can give wrong value due to synchronization issues.

// 'critical' specifies that only one thread enters the critical section at a given time
#pragma omp critical

    for (i = 1; i > 0; i++) {
        printf("\nEnter your choice:");
        scanf("%d", &n);

        // Switch Cases
        switch (n) {
        case 1:
            // If mutex is 1 and empty is non-zero, then it is possible to produce
            if ((mutex == 1)
                && (empty != 0)) {
                producer();
            }
            // Otherwise, print buffer is full
            else {
                printf("Buffer is full!");
            }
            break;

        case 2:
            // If mutex is 1 and full is non-zero, then it is possible to consume
            if ((mutex == 1)
                && (full != 0)) {
                consumer();
            }
            // Otherwise, print Buffer is empty
            else {
                printf("Buffer is empty!");
            }
            break;

        // Exit Condition
        case 3:
            exit(0);
            break;        }    }}


!!!! Reader Writer !!!!
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

sem_t wrt;
pthread_mutex_t mutex;
int cnt = 1;
int numreader = 0;

void *writer(void *wno)
{
    sem_wait(&wrt);
    cnt = cnt*2;
    printf("Writer %d modified cnt to %d\n",(*((int *)wno)),cnt);
    sem_post(&wrt);

}
void *reader(void *rno)
{
    // Reader acquire the lock before modifying numreader
    pthread_mutex_lock(&mutex);
    numreader++;
    if(numreader == 1) {
        sem_wait(&wrt); // If this id the first reader, then it will block the writer    }
    pthread_mutex_unlock(&mutex);
    // Reading Section
    printf("Reader %d: read cnt as %d\n",*((int *)rno),cnt);

    // Reader acquire the lock before modifying numreader
    pthread_mutex_lock(&mutex);
    numreader--;
    if(numreader == 0) {
        sem_post(&wrt); // If this is the last reader, it will wake up the writer.
    }
    pthread_mutex_unlock(&mutex);
}

int main()
{

    pthread_t read[10],write[5];
    pthread_mutex_init(&mutex, NULL);
    sem_init(&wrt,0,1);

    int a[10] = {1,2,3,4,5,6,7,8,9,10}; //Just used for numbering the producer and consumer

    for(int i = 0; i < 10; i++) {
        pthread_create(&read[i], NULL, (void *)reader, (void *)&a[i]);    }
    for(int i = 0; i < 5; i++) {
        pthread_create(&write[i], NULL, (void *)writer, (void *)&a[i]);    }

    for(int i = 0; i < 10; i++) {
        pthread_join(read[i], NULL);    }
    for(int i = 0; i < 5; i++) {
        pthread_join(write[i], NULL);    }

    pthread_mutex_destroy(&mutex);
    sem_destroy(&wrt);

    return 0; }


!!!! Banker's Algo !!!!
#include <stdio.h>
#include <stdbool.h>
#define NUMBER_OF_PROCESSES 5
#define NUMBER_OF_RESOURCES 3

// Function to check if the system is in a safe state
bool isSafeState(int processes[], int avail[], int max[][NUMBER_OF_RESOURCES], int alloc[][NUMBER_OF_RESOURCES]) {
    int work[NUMBER_OF_RESOURCES];
    bool finish[NUMBER_OF_PROCESSES] = {0}; // Mark all processes as not finished initially

    // Copy the available resources to work array
    for (int i = 0; i < NUMBER_OF_RESOURCES; i++) {
        work[i] = avail[i];
    }

    // Check for each process if it can be completed
    int safeSequence[NUMBER_OF_PROCESSES];
    int count = 0;

    while (count < NUMBER_OF_PROCESSES) {
        bool found = false;

        for (int p = 0; p < NUMBER_OF_PROCESSES; p++) {
            if (!finish[p]) { // Process p is not finished
                int j;
                for (j = 0; j < NUMBER_OF_RESOURCES; j++) {
                    if (max[p][j] - alloc[p][j] > work[j]) {
                        break;
                    }                }

                // If all resources of process p can be satisfied
                if (j == NUMBER_OF_RESOURCES) {
                    // Mark process p as finished and add it to safe sequence
                    for (int k = 0; k < NUMBER_OF_RESOURCES; k++) {
                        work[k] += alloc[p][k];
                    }
                    safeSequence[count++] = p;
                    finish[p] = true;
                    found = true;
                }            }        }

        // If no process could be found in this pass, the system is not safe
        if (!found) {
            printf("The system is not in a safe state.\n");
            return false;
        }    }

    // If we found a safe sequence
    printf("The system is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < NUMBER_OF_PROCESSES; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
    return true;
}

int main() {
    int processes[] = {0, 1, 2, 3, 4}; // List of processes

    // Available resources in the system
    int avail[NUMBER_OF_RESOURCES] = {3, 3, 2};

    // Maximum demand for each process
    int max[NUMBER_OF_PROCESSES][NUMBER_OF_RESOURCES] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    // Allocated resources for each process
    int alloc[NUMBER_OF_PROCESSES][NUMBER_OF_RESOURCES] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    isSafeState(processes, avail, max, alloc);
    return 0;}


!!!! FCFS Page Replacement !!!!
#include <stdio.h>

int main() {
    int n; // Number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int pages[n]; // Array to store page requests
    printf("Enter the sequence of pages: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    int frameSize; // Number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &frameSize);

    int frames[frameSize]; // Array to store pages in frames
    int pageFaults = 0;
    int currentIndex = 0;

    // Initialize frames array with -1 to indicate empty frames
    for (int i = 0; i < frameSize; i++) {
        frames[i] = -1;
    }

    // FIFO Page Replacement Algorithm
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] == page) {
                found = 1; // Page hit
                break;
            }        }

        // If the page is not in the frame, replace the oldest page
        if (!found) {
            frames[currentIndex] = page; // Replace page at current index
            currentIndex = (currentIndex + 1) % frameSize; // Move to the next index
            pageFaults++; // Increment page faults
        }

        // Print the current state of frames
        printf("Frames: ");
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
    return 0;}


!!!! LRU Page Replacement !!!!
#include <stdio.h>

int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;
    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }    }
    return pos;
}

int main() {
    int n, frames, pages[50], temp[10], time[10];
    int flag1, flag2, i, j, pos, page_faults = 0, counter = 0;

    // User input for the number of pages in the reference string
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    // User input for the reference string (sequence of pages)
    printf("Enter the reference string (page numbers): ");
    for (i = 0; i < n; ++i) {
        scanf("%d", &pages[i]);
    }

    // User input for the number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    // Initialize temporary array
    for (i = 0; i < frames; ++i) {
        temp[i] = -1;
    }

    printf("\nPage Replacement Process:\n");

    // Simulate LRU Page Replacement
    for (i = 0; i < n; ++i) {
        flag1 = flag2 = 0;

        // Check if page is already in a frame
        for (j = 0; j < frames; ++j) {
            if (temp[j] == pages[i]) {
                flag1 = flag2 = 1;
                counter++;
                time[j] = counter; // Update time of reference for the page
                break;
            }        }

        // If page is not in a frame
        if (flag1 == 0) {
            for (j = 0; j < frames; ++j) {
                if (temp[j] == -1) {
                    page_faults++;
                    counter++;
                    temp[j] = pages[i];
                    time[j] = counter;
                    flag2 = 1;
                    break;
                }            }        }

        // If there are no empty frames, replace the least recently used page
        if (flag2 == 0) {
            pos = findLRU(time, frames);
            temp[pos] = pages[i];
            counter++;
            time[pos] = counter;
            page_faults++;
        }

        // Print the current status of frames
        printf("\nStep %d:\t", i + 1);
        for (j = 0; j < frames; ++j) {
            if (temp[j] != -1)
                printf("%d\t", temp[j]);
            else
                printf("-\t");
        }    }

    printf("\n\nTotal Page Faults = %d\n", page_faults);
    return 0;}


!!!! Optimal Page Replacement !!!!
#include <stdio.h>

int findOptimal(int pages[], int frames[], int frameSize, int currentPage, int totalPages) {
    int farthest = currentPage, pos = -1;

    for (int i = 0; i < frameSize; i++) {
        int j;
        for (j = currentPage + 1; j < totalPages; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }        }
        // If the page in the frame is not going to be used in the future, choose it for replacement
        if (j == totalPages) {
            return i;
        }    }
    // If all pages in the frame will be used in the future, replace the one used farthest in the future
    return (pos == -1) ? 0 : pos;
}

int main() {
    int n; // Number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int pages[n]; // Array to store page requests
    printf("Enter the sequence of pages: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    int frameSize; // Number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &frameSize);

    int frames[frameSize]; // Array to store pages in frames
    int pageFaults = 0;

    // Initialize frames array with -1 to indicate empty frames
    for (int i = 0; i < frameSize; i++) {
        frames[i] = -1;
    }

    // Optimal Page Replacement Algorithm
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame (page hit)
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }        }

        // If the page is not in the frame, perform a page replacement
        if (!found) {
            int pos;

            // If there is an empty frame, use it
            for (pos = 0; pos < frameSize; pos++) {
                if (frames[pos] == -1) {
                    frames[pos] = page;
                    break;
                }            }

            // If no empty frame is available, use the Optimal page replacement strategy
            if (pos == frameSize) {
                pos = findOptimal(pages, frames, frameSize, i, n);
                frames[pos] = page;
            }

            pageFaults++; // Increment page faults
        }

        // Print the current state of frames
        printf("Frames: ");
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
    return 0;}


!!!! SSTF !!!!
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, head;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    int totalSeekTime = 0;
    int visited[n];

    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int minDistance = __INT_MAX__;
        int minIndex = -1;

        for (int j = 0; j < n; j++) {
            if (!visited[j] && abs(requests[j] - head) < minDistance) {
                minDistance = abs(requests[j] - head);
                minIndex = j;
            }        }

        visited[minIndex] = 1;
        totalSeekTime += minDistance;
        head = requests[minIndex];
    }

    printf("Total Seek Time: %d\n", totalSeekTime);
    return 0;
}


!!!! SCAN !!!!
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, head, direction;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the direction (0 for left, 1 for right): ");
    scanf("%d", &direction);

    int totalSeekTime = 0;

    // Sort requests
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }        }    }

    int i;
    for (i = 0; i < n; i++) {
        if (requests[i] > head) break;
    }

    if (direction == 1) {
        for (int j = i; j < n; j++) {
            totalSeekTime += abs(head - requests[j]);
            head = requests[j];
        }
        totalSeekTime += abs(head - requests[n - 1]);
        head = requests[n - 1];
        for (int j = i - 1; j >= 0; j--) {
            totalSeekTime += abs(head - requests[j]);
            head = requests[j];
        }
    } else {
        for (int j = i - 1; j >= 0; j--) {
            totalSeekTime += abs(head - requests[j]);
            head = requests[j];
        }
        totalSeekTime += abs(head - requests[0]);
        head = requests[0];
        for (int j = i; j < n; j++) {
            totalSeekTime += abs(head - requests[j]);
            head = requests[j];
        }    }

    printf("Total Seek Time: %d\n", totalSeekTime);
    return 0;
}


!!!! C-LOOK !!!!
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, head;
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    int totalSeekTime = 0;

    // Sort requests
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    int i;
    for (i = 0; i < n; i++) {
        if (requests[i] > head) break;
    }

    for (int j = i; j < n; j++) {
        totalSeekTime += abs(head - requests[j]);
        head = requests[j];
    }

    for (int j = 0; j < i; j++) {
        totalSeekTime += abs(head - requests[j]);
        head = requests[j];
    }

    printf("Total Seek Time: %d\n", totalSeekTime);
    return 0; }
